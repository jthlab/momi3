"""Merge two populations in different event blocks"""
from copy import deepcopy
from dataclasses import dataclass
from typing import TypeVar

import numpy as np

from momi3.common import Axes, PopCounter, Population, State, oe_einsum, unique_str
from momi3.math_functions import log_hypergeom

from .event import Event

T = TypeVar("T")


@dataclass(frozen=True, kw_only=True)
class Split2(Event):
    """Merge two populations in different event blocks.

    Attributes:
        donor: the population which donates alleles into the recipient (backwards in time)
        recipient: the population which receives allels from the donor

    Notes:
        After the merge, the donor population is removed from the partial likelihood.
    """

    donor: Population
    recipient: Population

    def _setup_impl(
        self, in_axes: dict[str, Axes], ns: PopCounter
    ) -> tuple[Axes, PopCounter, T]:
        donor_axes = in_axes["donor_axes"]
        recip_axes = in_axes["recipient_axes"]
        assert self.recipient in recip_axes
        assert self.donor in donor_axes
        nw1 = donor_axes[self.donor] - 1
        nw2 = recip_axes[self.recipient] - 1
        n = nw1 + nw2
        x1, x2, x = np.ogrid[: nw1 + 1, : nw2 + 1, : n + 1]
        H = np.exp(log_hypergeom(n=nw1, k=x1, M=n, N=x)) * (
            x == x1 + x2
        )  # shape = (nw1+1, nw2+1, nv+1)
        # construct axes
        assert not (
            donor_axes.keys() & recip_axes.keys()
        )  # the axes should be disjoint if we are using this event
        out_axes = recip_axes | donor_axes
        out_axes[self.recipient] += out_axes[self.donor] - 1
        del out_axes[self.donor]
        aux = {
            "H": H,
            "donor_axes": donor_axes,
            "recip_axes": recip_axes,
            "out_axes": out_axes,
        }
        # determine number of lineages subtended by resulting pops
        nsp = deepcopy(ns)
        nsp[self.recipient].update(nsp[self.donor])
        del nsp[self.donor]
        return out_axes, nsp, aux

    def _execute_impl(self, state: dict[str, State], params: dict, aux: T) -> State:
        """Merge two populations in different event blocks.

        Args:
            pop1_st: state of pop1 before the merge
            pop2_st: state of pop2 before the merge
            pd: dict of parameters, unused.
            aux: dict of auxiliary data generated by setup

        Notes:
            pop2 is merged into pop1. The merged population resides in axis 0.
        """
        donor_st = state["donor_state"]
        recip_st = state["recipient_state"]
        out_inds = list(aux["out_axes"])
        xv = unique_str(out_inds)
        out_inds[out_inds.index(self.recipient)] = xv
        H_inds = [self.donor, self.recipient, xv]
        donor_inds = list(aux["donor_axes"])
        recip_inds = list(aux["recip_axes"])
        plp = oe_einsum(
            aux["H"], H_inds, donor_st.pl, donor_inds, recip_st.pl, recip_inds, out_inds
        )
        phip = donor_st.phi * recip_st.l0 + recip_st.phi * donor_st.l0
        return State(pl=plp, phi=phip, l0=donor_st.l0 * recip_st.l0)
